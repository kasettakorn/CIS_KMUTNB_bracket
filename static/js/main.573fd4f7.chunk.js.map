{"version":3,"sources":["components/TournamentBracket.js","App.js","serviceWorker.js","index.js"],"names":["TournamentBracket","props","handleClick","value","i","qfArray","state","newqfArray","_","cloneDeep","setState","handleClickQF","group","fArray","newfArray","handleClickFinal","winner","Array","bind","this","className","style","fontWeight","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.573fd4f7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport _ from 'lodash';\nimport '../styles/Tournament.scss';\n\n\nclass TournamentBracket extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            winner: \"\",\n            qfArray: new Array(4),\n            fArray: new Array(2)\n        }\n        this.handleClick = this.handleClick.bind(this);\n        this.handleClickQF = this.handleClickQF.bind(this);\n        this.handleClickFinal = this.handleClickFinal.bind(this);\n    }\n    handleClick = (value, i) => {\n        const { qfArray } = this.state;\n        const newqfArray = _.cloneDeep(qfArray);\n        newqfArray[i] = value;\n        this.setState({\n            qfArray: newqfArray\n        })\n    }\n    handleClickQF = (i, group) => {\n        const { fArray, qfArray } = this.state;\n        const newfArray = _.cloneDeep(fArray);\n        newfArray[group] = qfArray[i];\n        this.setState({\n            fArray: newfArray\n        })\n    }\n    handleClickFinal = i => {\n        this.setState({\n            winner: this.state.fArray[i]\n        })\n    }\n    render() {\n        const { qfArray, fArray, winner } = this.state;\n        return (\n            <div className=\"wrapper\">\n                <div className=\"item\">\n                    <div className=\"item-parent\">\n                        <p style={{fontWeight:\"700\"}}><span>👑</span> {winner}</p>\n                    </div>\n                    <div className=\"item-childrens\">\n                        <div className=\"item-child\">\n                            <div className=\"item\">\n                                <div onClick={()=>this.handleClickFinal(0)} className=\"item-parent\">\n                                    <p>{fArray[0]}</p>\n                                </div>\n                                <div className=\"item-childrens\">\n                                    <div className=\"item-child\">\n                                        <div className=\"item\">\n                                            <div onClick={()=>this.handleClickQF(0, 0)} className=\"item-parent\">\n                                                <p>{qfArray[0]}</p>\n                                            </div>\n                                            <div className=\"item-childrens\">\n                                                <div onClick={()=>this.handleClick(\"Fund. Com\", 0)} className=\"item-child\">\n                                                    <p>Fund. Com</p>\n                                                </div>\n                                                <div onClick={()=>this.handleClick(\"Digital 1-2\", 0)} className=\"item-child\">\n                                                    <p>Digital 1-2</p>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"item-child\">\n                                        <div className=\"item\">\n                                            <div onClick={()=>this.handleClickQF(1, 0)} className=\"item-parent\">\n                                                <p>{qfArray[1]}</p>\n                                            </div>\n                                            <div className=\"item-childrens\">\n                                                <div onClick={()=>this.handleClick(\"Algorithms\", 1)} className=\"item-child\">\n                                                    <p>Algorithms</p>\n                                                </div>\n                                                <div onClick={()=>this.handleClick(\"Data structure\", 1)} className=\"item-child\">\n                                                    <p>Data structure</p>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"item-child\">\n                            <div className=\"item\">\n                                <div onClick={()=>this.handleClickFinal(1)} className=\"item-parent\">\n                                    <p>{fArray[1]}</p>\n                                </div>\n                                <div className=\"item-childrens\">\n                                    <div className=\"item-child\">\n                                        <div className=\"item\">\n                                            <div onClick={()=>this.handleClickQF(2, 1)} className=\"item-parent\">\n                                                <p>{qfArray[2]}</p>\n                                            </div>\n                                            <div className=\"item-childrens\">\n                                                <div onClick={()=>this.handleClick(\"SA\", 2)} className=\"item-child\">\n                                                    <p>SA</p>\n                                                </div>\n                                                <div onClick={()=>this.handleClick(\"SE\", 2)} className=\"item-child\">\n                                                    <p>SE</p>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"item-child\">\n                                        <div className=\"item\">\n                                            <div onClick={()=>this.handleClickQF(3, 1)} className=\"item-parent\">\n                                                <p>{qfArray[3]}</p>\n                                            </div>\n                                            <div className=\"item-childrens\">\n                                                <div onClick={()=>this.handleClick(\"OOP\", 3)} className=\"item-child\">\n                                                    <p>OOP</p>\n                                                </div>\n                                                <div onClick={()=>this.handleClick(\"Networks\", 3)} className=\"item-child\">\n                                                    <p>Networks</p>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TournamentBracket\n","import React, { Component } from 'react'\nimport Tournament from './components/TournamentBracket';\nimport './styles/App.css'\nclass App extends Component {\n\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"heading\">\n            ⚽️ CIS Tournament Bracket ⚽️ \n        </h1>\n        <Tournament />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}